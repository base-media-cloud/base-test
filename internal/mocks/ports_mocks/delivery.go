// Code generated by MockGen. DO NOT EDIT.
// Source: delivery.go
//
// Generated by this command:
//
//	mockgen -source delivery.go -destination=../../mocks/ports_mocks/delivery.go -package=ports_mocks
//
// Package ports_mocks is a generated GoMock package.
package ports_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeliverySvc is a mock of DeliverySvc interface.
type MockDeliverySvc struct {
	ctrl     *gomock.Controller
	recorder *MockDeliverySvcMockRecorder
}

// MockDeliverySvcMockRecorder is the mock recorder for MockDeliverySvc.
type MockDeliverySvcMockRecorder struct {
	mock *MockDeliverySvc
}

// NewMockDeliverySvc creates a new mock instance.
func NewMockDeliverySvc(ctrl *gomock.Controller) *MockDeliverySvc {
	mock := &MockDeliverySvc{ctrl: ctrl}
	mock.recorder = &MockDeliverySvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliverySvc) EXPECT() *MockDeliverySvcMockRecorder {
	return m.recorder
}

// Price mocks base method.
func (m *MockDeliverySvc) Price(grams float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Price", grams)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Price indicates an expected call of Price.
func (mr *MockDeliverySvcMockRecorder) Price(grams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*MockDeliverySvc)(nil).Price), grams)
}

// Type mocks base method.
func (m *MockDeliverySvc) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDeliverySvcMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDeliverySvc)(nil).Type))
}
